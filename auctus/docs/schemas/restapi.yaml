openapi: 3.0.1
info:
  title: "Auctus"
  description: |
    # Introduction

    Auctus is a dataset search engine and data augmentation platform developed at New York University. It can be used to index the content of datasets from a variety of sources, that can later be queried to find data that can be joined or appended to a user's data.

    The system can be found at this address: https://auctus.vida-nyu.org/

    You can find the source code on GitLab: https://gitlab.com/ViDA-NYU/auctus/auctus

    The rest of the documentation, including the web UI and the Python libraries: https://docs.auctus.vida-nyu.org/

    # REST API introduction

    There is also a [Python client library](https://docs.auctus.vida-nyu.org/python/datamart-rest.html) for this API.

    The API is versioned, with the current version being `v1`. The full paths for an API request would therefore be something like:

        https://auctus.vida-nyu.org/api/v1/download/datamart.socrata.data-cityofnewyork-us.ht4t-wzcm
  contact:
    email: "remi.rampin@nyu.edu"
  license:
    name: "MIT"
  version: "v1"
externalDocs:
  description: "Auctus documentation"
  url: "https://docs.auctus.vida-nyu.org/"
servers:
- url: "https://auctus.vida-nyu.org/api/v1"
tags:
- name: "query"
  x-displayName: Query
  description: "Searching the index for datasets to download or augment with."
- name: "ingest"
  x-displayName: Ingest new datasets
  description: "Adding new datasets to the index."
- name: "augment"
  x-displayName: Augmentation
  description: "Using Auctus to perform server-side augmentation."
- name: "embed"
  x-displayName: "Embedding Auctus in your software"
  description: |
    Rather than using the API and implementing your own UI for data search and augmentation, it is possible to **re-use our web frontend** and collect results **directly from Auctus into your system** without the user downloading it and then adding it in your interface.

    This can be done using the following 3 steps (4 steps for augmentations):

    ### (optional) Step 0: Provide your input data if searching for augmentations

    If you don't have input data, skip this step.

    Issue a request [`POST /profile`](#operation/profile), providing your data, and get the string under the `token` JSON key.

    ### Step 1: Create a session

    Issue a request [`POST /session/new`](#operation/session_new), with the following JSON input:

      * `data_token`: the token obtained from [`POST /profile`](#operation/profile), if searching for augmentations. Optional.
      * `format`: the desired format for datasets, as specified for [the download endpoint](#operation/download_id). Options go in the `format_options` object. Optional, defaults to `csv`.
      * `system_name`: the name of your system. Optional, defaults to "TA3". Will be shown on buttons (e.g. "Add to <system_name>", "Join and add to <system_name>").

    ### Step 2: Direct the user to Auctus

    Direct the user to the `link_url` obtained from [`POST /session/new`](#operation/session_new) at step 1. Wait for them to be done to move to step 3, or poll step 3 regularly.

    The user will be able to use our interface like normal, including using filters and related searches. The download buttons are replaced by "Add to <system_name>" buttons.

    ### Step 3: Obtain the selected data from Auctus

    Issue a request to [`GET /session/<session_id>`](#operation/session_get), where `<session_id>` is the short string you obtained in step 1.
- name: "result_model"
  x-displayName: Result
  description: |
    <SchemaDefinition schemaRef="#/components/schemas/Result" />
x-tagGroups:
- name: api
  x-displayName: API
  tags:
  - "query"
  - "ingest"
  - "augment"
  - "embed"
- name: models
  x-displayName: Models
  tags:
  - "result_model"
paths:
  /upload:
    post:
      tags:
      - "ingest"
      summary: "Add a dataset to the index"
      description: |
        The file can be provided either via a URL or direct upload of a supported format.

        When providing a URL, make sure it is a direct link to a file in a supported format (CSV, Excel, SPSS, ...) and not to an HTML page with a "download" button or GitHub page where the content is embedded (use the "raw" button).

        The request will return the ID of the new dataset immediately, but profiling will happen in the background so the file will only appear in searches after a couple minutes.
      operationId: "upload"
      requestBody:
        content:
          multipart/form-data:
            schema:
              oneOf:
              - title: URL
                properties:
                  name:
                    type: string
                    description: "Dataset name"
                  description:
                    type: string
                  address:
                    type: string
                required:
                - name
                - address
              - title: direct upload
                properties:
                  name:
                    type: string
                    description: "Dataset name"
                  description:
                    type: string
                  file:
                    type: string
                    format: binary
                required:
                - name
                - file
          application/x-www-form-urlencoded:
            schema:
              oneOf:
              - title: URL
                properties:
                  name:
                    type: string
                    description: "Dataset name"
                  description:
                    type: string
                  address:
                    type: string
                required:
                - name
                - address
              - title: direct upload
                properties:
                  name:
                    type: string
                    description: "Dataset name"
                  description:
                    type: string
                  file:
                    type: string
                    format: binary
                required:
                - name
                - file
        required: true
      responses:
        200:
          description: "OK, provides ID of dataset (which will be available once profiling ends)"
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  id:
                    type: string
                required:
                - id
                additionalProperties: false
        400:
          description: "Error"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
      x-codeSamples:
      - lang: Python
        source: |
          # File
          response = requests.post(
              'https://auctus.vida-nyu.org/api/v1/upload',
              files={'file': open('data/myfile.csv')},
              data={
                  "name": "Basic CSV test",
                  "description": "Test upload from API, please ignore",
              },
          )
          response.raise_for_status()
          print(response.json()['id'])

          # URL
          response = requests.post(
              'https://auctus.vida-nyu.org/api/v1/upload',
              data={
                  "address": "https://gitlab.com/ViDA-NYU/auctus/auctus/-/raw/master/tests/data/basic.csv",
                  "name": "Basic CSV test",
                  "description": "Test upload from API, please ignore",
              },
          )
          response.raise_for_status()
          print(response.json()['id'])
      - lang: curl
        source: |
          # File
          curl \
              -F file=@data/myfile.csv \
              -F name="Basic CSV test" \
              -F description="Test upload from API, please ignore" \
              https://auctus.vida-nyu.org/api/v1/upload

          # URL
          curl \
              -F address=https://gitlab.com/ViDA-NYU/auctus/auctus/-/raw/master/tests/data/basic.csv \
              -F name="Basic CSV test" \
              -F description="Test upload from API, please ignore" \
              https://auctus.vida-nyu.org/api/v1/upload
  /search:
    post:
      tags:
      - "query"
      summary: "Search the index for datasets"
      description: |
        The `Content-Type` should be set to [`multipart/form-data`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) to allow sending both the query description (JSON) and the data file. Alternatively you can post just JSON or just data.

        You need to specify at least one of `data` (tabular file), `data_profile` (profile information), or `query` (JSON query).
      operationId: "search"
      parameters:
      - in: query
        name: "page"
        schema:
          type: integer
          minimum: 1
        required: false
      - in: query
        name: "size"
        schema:
          type: integer
          minimum: 1
        required: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                data:
                  type: string
                  description: "Data which you want to augment"
                  format: binary
                data_token:
                  type: string
                  description: "Input data to search for augmentation, in the form of the \"token\" field returned by /profile"
                query:
                  $ref: "#/components/schemas/Query"
              # TODO: One of the two needs to be provided
            encoding:
              query:
                contentType: application/json
            examples:
              keyword_search:
                summary: "Search using the keywords 'taxi' and 'medallion'"
                value:
                  query:
                    keywords:
                    - "taxi"
                    - "medallion"
                    variables: []
              geo_bronx:
                summary: "Search for geospatial datasets concerning the Bronx"
                value:
                  query:
                    keywords: []
                    variables:
                    - type: geospatial_variable
                      latitude1: 40.894673917657514
                      latitude2: 40.823526516469315
                      longitude1: -73.91395568847656
                      longitude2: -73.82675170898438
          application/x-www-form-urlencoded:
            schema:
              properties:
                data:
                  type: string
                  description: "Data which you want to augment"
                  format: binary
                data_token:
                  type: string
                  description: "Input data to search for augmentation, in the form of the \"token\" field returned by /profile"
                query:
                  $ref: "#/components/schemas/Query"
              # TODO: One of the two needs to be provided
            encoding:
              query:
                contentType: application/json
          text/csv:
            schema:
              type: string
              format: binary
          application/json:
            schema:
              $ref: "#/components/schemas/Query"
            examples:
              keyword_search:
                summary: "Search using the keywords 'taxi' and 'medallion'"
                value:
                  keywords:
                  - "taxi"
                  - "medallion"
                  variables: []
              geo_bronx:
                summary: "Search for geospatial datasets concerning the Bronx"
                value:
                  keywords: []
                  variables:
                  - type: geospatial_variable
                    latitude1: 40.894673917657514
                    latitude2: 40.823526516469315
                    longitude1: -73.91395568847656
                    longitude2: -73.82675170898438
      responses:
        200:
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Result"
                  facets:
                    $ref: "#/components/schemas/Facets"
                  total:
                    type: integer
                required: ["results"]
                additionalProperties: false
        400:
          description: "Invalid query"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
      x-codeSamples:
      - lang: Python
        source: |
          response = requests.post(
              'https://auctus.vida-nyu.org/api/v1/search',
              json={'keywords': 'taxi'},
          )
          response.raise_for_status()
          for result in response.json()['results']:
              print(result['score'], result['name'], result['id'])

          # Query + data
          response = requests.post(
              'https://auctus.vida-nyu.org/api/v1/search',
              files={
                  'query': json.dump({'keywords': 'weather'}).encode('utf-8'),
                  'data': open('data/myfile.csv'),
              },
          )
          response.raise_for_status()
      - lang: curl
        source: |
          # Just query
          curl -H "Content-Type: application/json" \
              -d '{"keywords": "taxi"}' \
              https://auctus.vida-nyu.org/api/v1/search

          # Query + data
          curl -F query='{"keywords": "taxi"}' \
              -F data=@data/myfile.csv \
              https://auctus.vida-nyu.org/api/v1/search
  /profile:
    post:
      tags:
      - "query"
      summary: Profile a dataset
      description: |
        The JSON object returned by this endpoint can be passed to `/search` as the `data_profile`.

        It replaces the `data` argument, allowing for lighter searches since the data is only sent once. This is useful in situation where the user will incrementally adjust his query.
      operationId: "profile"
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              description: Data which you want to profile
              format: binary
            examples:
              simple:
                summary: Example CSV file
                value:
                  "name,country,number,what\nremi,france,4,false\naecio,brazil,3,true\nsonia,peru,7,true\nroque,peru,8,true\nfernando,brazil,10,false\n"
          multipart/form-data:
            schema:
              properties:
                data:
                  type: string
                  description: Data which you want to profile
                  format: binary
      responses:
        200:
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Result"  # TODO: not quite
        400:
          description: Invalid query
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
      x-codeSamples:
      - lang: Python
        source: |
          response = requests.post(
              'https://auctus.vida-nyu.org/api/v1/profile',
              files={'data': open('data/myfile.csv')},
          )
          response.raise_for_status()
          print(response.json())
      - lang: curl
        source: |
          curl -F data=@data/myfile.csv \
              https://auctus.vida-nyu.org/api/v1/profile
  /download/{dataset_id}:
    get:
      tags:
      - "query"
      summary: "Download a dataset by its ID"
      description: |
        This allows you to retrieve a dataset in CSV or another supported output format.

        You can use the `format` query parameter to specify an output format, for example `/download?format=d3m`:

          * `csv`: returns the dataset as a CSV file (`application/octet-stream`); this is the default option
          * `d3m`: returns a ZIP file (`application/zip`) containing the dataset as a CSV file and its corresponding `datasetDoc.json` file. See [the D3M Dataset Schema documentation](https://gitlab.com/datadrivendiscovery/data-supply/-/blob/shared/documentation/datasetSchema.md) for more information.

        Note that this endpoint might serve data directly or it might redirect to another location.
      operationId: "download_id"
      parameters:
      - in: path
        name: "dataset_id"
        schema:
          type: string
        required: true
        examples:
          nyc_data:
            value: "datamart.socrata.data-cityofnewyork-us.395v-hkhg"
      - in: query
        name: "format"
        schema:
          enum: ["csv", "d3m"]
      - in: query
        name: "format_options"
        schema:
          type: string
      - in: query
        name: "session_id"
        schema:
          type: string
      responses:
        404:
          description: "No dataset with this ID"
        200:
          description: OK
        302:
          description: "OK, redirects to dataset"
  /download:
    post:
      tags:
      - "query"
      summary: "Download a dataset from a search result"
      description: |
        This allows you to retrieve a dataset in CSV (or another supported output format using the `format` query parameter, see above).

        Note that this endpoint might serve data directly or it might redirect to another location.

        This endpoint differs from `/download/{dataset_id}` in that it takes a full dataset record instead of just an ID. The advantage is that you can change this record to some extent (example: skip some converters) or send the record for a dataset the server doesn't have in its index (as long as sufficient materialization information is present).
      operationId: "download"
      parameters:
      - in: query
        name: "format"
        schema:
          enum: ["csv", "d3m"]
      - in: query
        name: "format_options"
        schema:
          type: string
      - in: query
        name: "session_id"
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/Result" # TODO: not quite
            examples:
              nyc_data:
                summary: "Sample search result sent back as task"
                value:
                  id: "datamart.socrata.data-cityofnewyork-us.vbgf-ket3"
                  metadata:
                    columns:
                    - name: "Borough"
                    - name: "Calendar Year"
                    - name: "Filed Violation Count"
                    materialize:
                      socrata_id: "vbgf-ket3"
                      socrata_domain: "data.cityofnewyork.us"
                      socrata_updated: "2019-04-29T16:54:13.000Z"
                      direct_url: "https://data.cityofnewyork.us/api/views/vbgf-ket3/rows.csv?accessType=DOWNLOAD"
                      identifier: datamart.socrata
                      date: "2019-06-27T19:26:53.147559Z"
          multipart/form-data:
            schema:
              properties:
                task:
                  $ref: "#/components/schemas/Result" # TODO: not quite
              required:
              - task
            encoding:
              task:
                contentType: application/json
      x-codeSamples:
      - lang: Python
        source: |
          # Search result as returned by /search API
          search_result = {
              "id": "datamart.socrata.data-cityofnewyork-us.vbgf-ket3",
              "metadata": {"materialize": {
                  "socrata_id": "vbgf-ket3",
                  "socrata_domain": "data.cityofnewyork.us",
                  "socrata_updated": "2019-04-29T16:54:13.000Z",
                  "direct_url": "https://data.cityofnewyork.us/api/views/vbgf-ket3/rows.csv?accessType=DOWNLOAD",
                  "identifier": "datamart.socrata",
                  "date": "2019-06-27T19:26:53.147559Z"
              }}
          }
          # Use /download endpoint
          response = requests.post(
              'https://auctus.vida-nyu.org/api/v1/download',
              files={
                  'task': json.dumps(search_result).encode('utf-8'),
              },
          )
          response.raise_for_status()
          print(len(response.content))
      - lang: curl
        source: |
          curl -F task=@searchresult.json \
              https://auctus.vida-nyu.org/api/v1/download
      responses:
        404:
          description: "No dataset for this result"
        200:
          description: OK
        302:
          description: OK
        400:
          description: "Invalid query"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
  /metadata/{dataset_id}:
    get:
      tags:
      - "query"
      summary: "Get the metadata for a dataset by its ID"
      description: |
        This allows you to retrieve the metadata record for a dataset in the index.
      operationId: "metadata"
      parameters:
      - in: path
        name: "dataset_id"
        schema:
          type: string
        required: true
        examples:
          nyc_data:
            value: "datamart.socrata.data-cityofnewyork-us.395v-hkhg"
      responses:
        404:
          description: "No dataset with this ID"
        200:
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  id:
                    type: string
                  status:
                    type: string
                    enum:
                    - "indexed"
                    - "error"
                    - "queued"
                  metadata:
                    $ref: "query_result_schema.json#/definitions/metadata"
                required: ["id", "status", "metadata"]
      x-codeSamples:
      - lang: Python
        source: |
          response = requests.get(
              'https://auctus.vida-nyu.org/api/v1/metadata/datamart.socrata.data-cityofnewyork-us.395v-hkhg',
          )
          response.raise_for_status()
          print(response.json())
      - lang: curl
        source: |
          curl https://auctus.vida-nyu.org/api/v1/metadata/datamart.socrata.data-cityofnewyork-us.395v-hkhg
  /augment:
    post:
      tags:
      - "augment"
      summary: "Augment an input dataset with a selected search result"
      description: |
        The `Content-Type` should be set to [`multipart/form-data`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) to allow sending both a dataset search result (`task`) and a data file (`data`).
      operationId: "augment"
      parameters:
      - in: query
        name: "format"
        schema:
          enum: ["csv", "d3m"]
      - in: query
        name: "format_options"
        schema:
          type: string
      - in: query
        name: "session_id"
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                data:
                  type: string
                  description: "Data which you want to augment"
                  format: binary
                task:
                  $ref: "#/components/schemas/Result"
              required:
              - task
            encoding:
              task:
                contentType: application/json
      responses:
        200:
          description: OK
        400:
          description: "Invalid request"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
  /session/new:
    post:
      tags:
      - "embed"
      summary: "Create a session"
      description: |
        Creates a session in which a user can add datasets through the Auctus web interface, to be retrieved from your software later.
      operationId: "session_new"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data_token:
                  type: string
                  description: "Input data to search for augmentation, in the form of the \"token\" field returned by /profile"
                format:
                  type: string
                format_options:
                  type: string
                system_name:
                  type: string
                  description: "Name of your system, to show on buttons in the interface"
      responses:
        200:
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  session_id:
                    type: string
                    description: "A short string identifying the session. Use this later to retrieve results."
                  link_url:
                    type: string
                    description: "A link to the Auctus web interface that you can present to the user (or embed, etc)."
        400:
          description: "Invalid request"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: "#/components/schemas/Error"
  /session/{session_id}:
    get:
      tags:
      - "embed"
      summary: "Get session results"
      description: |
        Get the results added to this session. Every result the user selects from the Auctus web interface is added to the session to be retrieved here.
      operationId: session_get
      parameters:
      - in: path
        name: "session_id"
        schema:
          type: string
        required: true
      responses:
        404:
          description: "No session with this ID"
        200:
          description: OK
          content:
            application/json; charset=utf-8:
              schema:
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          description: "Link to the data the user selected, in the format chosen when creating the session."
                        type:
                          type: string
                          description: |
                            * `"download"` if the result is a dataset from Auctus
                            * `"join"`/`"union"` if the result is the input data augmented with a dataset from Auctus.
                          enum:
                          - "download"
                          - "join"
                          - "union"
components:
  schemas:
    Query:
      $ref: "query_input_schema.json"
    Error:
      description: "JSON object returned by API on client errors"
      properties:
        error:
          type: string
          description: "The error message"
    Result:
      $ref: "query_result_schema.json"
    Facets:
      additionalProperties:
        properties:
          buckets:
            additionalProperties:
              type: integer
          incomplete:
            type: boolean
